name: FrontendService CI/CD

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "main" ]

env:
  AZURE_CONTAINER_REGISTRY: ocorneracr3
  APP_NAME: frontendservice
  RESOURCE_GROUP: Online-cornerRG
  IMAGE_TAG: ${{ github.sha }}
  DOCKERFILE_PATH: ./frontend-service/Dockerfile  # Specify path to your Dockerfile

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Get ACR credentials dynamically
      run: |
        ACR_USERNAME=$(az acr credential show --name ${{ env.AZURE_CONTAINER_REGISTRY }} --query "username" -o tsv)
        ACR_PASSWORD=$(az acr credential show --name ${{ env.AZURE_CONTAINER_REGISTRY }} --query "passwords[0].value" -o tsv)

        echo "ACR_USERNAME=$ACR_USERNAME" >> $GITHUB_ENV
        echo "ACR_PASSWORD=$ACR_PASSWORD" >> $GITHUB_ENV

    - name: Login to ACR
      uses: docker/login-action@v2
      with:
        registry: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io
        username: ${{ env.ACR_USERNAME }}
        password: ${{ env.ACR_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: ./frontend-service             
        file: ${{ env.DOCKERFILE_PATH }}       
        push: true
        tags: |
          ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.APP_NAME }}:latest
          ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.APP_NAME }}:${{ env.IMAGE_TAG }}

    - name: Get App Service name
      run: |
        APP_SERVICE_NAME=$(az webapp list --resource-group ${{ env.RESOURCE_GROUP }} --query "[?name=='${{ env.APP_NAME }}'].name" -o tsv)
        if [ -z "$APP_SERVICE_NAME" ]; then
          echo "No App Service found with the name '${{ env.APP_NAME }}'. Exiting."
          exit 1
        fi
        echo "APP_SERVICE_NAME=$APP_SERVICE_NAME" >> $GITHUB_ENV

    - name: Deploy to Azure App Service
      run: |
        az webapp config container set \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --name ${{ env.APP_SERVICE_NAME }} \
          --docker-custom-image-name ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.APP_NAME }}:${{ env.IMAGE_TAG }} \
          --docker-registry-server-url https://${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io
